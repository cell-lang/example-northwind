type ContactId = EmployeeId, SupplierId, ShipperId, CustomerId;

type SalesTree  = (String, String, Float, Maybe[Float], SalesTree*);


using Northwind {
  // Regions and their attributes
  (RegionId, String)* regions = sort_by([(r, description(r)) : r <- region], untag($(0)));

  // First and last name of all employees, sorted by last name
  (String, String)* sorted_employees_names {
    unsorted = [(first_name(e), last_name(e)) : e <- employee];
    return sort_by(unsorted, $(1));
  }

  // Subtotal for each order.
  //   SELECT 
  //       OrderID,
  //       FORMAT(SUM(UnitPrice * Quantity * (1 - Discount)), 2) AS Subtotal
  //   FROM
  //       `Order Details`
  //   GROUP BY OrderID
  //   ORDER BY OrderID;

  Float subtotal(OrderId o, ProductId p) =
    item_unit_price(o, p) * quantity(o, p) * (1 - discount(o, p));

  Float subtotal(OrderId o) = sum(subtotal(o, p) : p <- order_detail(o, ?));

  (OrderId, Float)* orders_subtotals {
    sorted_order_ids = sort_by([o : o <- order], untag($));
    return ((o, subtotal(o)) : o <- sorted_order_ids);
  }

  // (OrderId, Float)* orders_subtotals = sort_by([(o, subtotal(o)) : o <- order], untag($(0)));

  // (OrderId, Float)* orders_subtotals = sort_by([o -> subtotal(o) : o <- order], untag($));

  // (OrderId, Float)* orders_subtotals {
  //   subtotals = [o -> subtotal(o) : o <- orders];
  //   return sort_by(subtotals, untag($(0)));
  // }

  // Subtotal for each order, with date of shipping:
  //   SELECT DISTINCT
  //       DATE(a.ShippedDate) AS ShippedDate, a.OrderID, b.Subtotal
  //   FROM
  //       Orders a
  //           INNER JOIN
  //       (SELECT DISTINCT
  //           OrderID,
  //           FORMAT(SUM(UnitPrice * Quantity * (1 - Discount)), 2) AS Subtotal
  //       FROM
  //           `Order Details`
  //       GROUP BY OrderID) b ON a.OrderID = b.OrderID
  //   WHERE
  //       a.ShippedDate IS NOT NULL
  //           AND a.ShippedDate BETWEEN DATE('1996-12-24') AND DATE('1997-09-30')
  //   ORDER BY a.ShippedDate;

  (Date, OrderId, Float)* shipped_orders_subtotal {
    // Selecting the ids of all the orders that were shipped between 24 Dec 1996 and 30 Sep 1997
    orders = [o : o d <- shipped_date, d >= `1996-12-24`, d <= `1997-09-30`];
    // Sorting them by date of shipping
    orders = sort_by(orders, shipped_date($), untag($));
    // Gathering all the required data
    return ((shipped_date(o), o, subtotal(o)) : o <- orders);
  }


  // [OrderId] shipped_between(Date start_date, Date end_date) =
  //   [o : o d <- shipped_date, d >= start_date, d <= end_date];

  // (Date, OrderId, Float)* shipped_orders_subtotal(Date start_date, Date end_date) {
  //   // All orders shipped between the given date, sorted by date of shipping
  //    orders = sort_by(shipped_between(start_date, end_date), shipped_date($), untag($));

  //   // Gathering all the required data
  //   return ((shipped_date(o), o, subtotal(o)) : o <- orders);
  // }

  // Total sales per product, with category:
  //   SELECT DISTINCT
  //       a.CategoryID,
  //       a.CategoryName,
  //       b.ProductName,
  //       SUM(ROUND(y.UnitPrice * y.Quantity * (1 - y.Discount), 2)) AS ProductSales
  //   FROM
  //       `Order Details` y
  //           INNER JOIN
  //       Orders d ON d.OrderID = y.OrderID
  //           INNER JOIN
  //       Products b ON b.ProductID = y.ProductID
  //           INNER JOIN
  //       Categories a ON a.CategoryID = b.CategoryID
  //   GROUP BY a.CategoryID , a.CategoryName , b.ProductName
  //   ORDER BY a.CategoryName , b.ProductName;

  Float subtotal(ProductId p) = sum(subtotal(o, p) : o <- order_detail(?, p));

  (CategoryId, String, String, Float)* total_sales_per_product_with_category {
    subtotals = [
      (c, name(c), product_name(p), subtotal(p))
      : p <- product, order_detail(_, p), c = category_id(p)
    ];
    return sort_by(subtotals, $(1), $(2));
  }

  (CategoryId, String, (String, Float)*)* total_sales_per_product_by_category {
    subtotals = [(c, name(c), products_subtotals(c)) : c <- category];
    return sort_by(subtotals, untag($(0)));
  }

  (String, Float)* products_subtotals(CategoryId c) {
    products = sort_by([p : p <- category_id(?, c)], untag($));
    return ((product_name(p), subtotal(p)) : p <- products);
  }

  // Total sales per product in 1997, grouped by category:
  //   SELECT DISTINCT
  //       a.CategoryID,
  //       a.CategoryName,
  //       b.ProductName,
  //       SUM(ROUND(y.UnitPrice * y.Quantity * (1 - y.Discount), 2)) AS ProductSales
  //   FROM
  //       `Order Details` y
  //           INNER JOIN
  //       Orders d ON d.OrderID = y.OrderID
  //           INNER JOIN
  //       Products b ON b.ProductID = y.ProductID
  //           INNER JOIN
  //       Categories a ON a.CategoryID = b.CategoryID
  //   WHERE
  //       d.OrderDate BETWEEN DATE('1997/1/1') AND DATE('1997/12/31')
  //   GROUP BY a.CategoryID , a.CategoryName , b.ProductName
  //   ORDER BY a.CategoryName , b.ProductName , ProductSales;

  (CategoryId, String, String, Float)* total_sales_per_product_with_category(Date start_date, Date end_date) {
    subtotals = []; // Product -> Total
    for order date <- order_date
      if date >= start_date and date <= end_date
        for product <- order_detail(order, ?)
          subtotals = accumulate(subtotals, product, subtotal(order, product));

    unsorted = [(c, name(c), product_name(p), t) : p t <- subtotals, c = category_id(p)];
    return sort_by(unsorted, $(1), $(2));
  }

  // Products whose price is above average:
  //   SELECT DISTINCT
  //       ProductName, UnitPrice
  //   FROM
  //       Products
  //   WHERE
  //       UnitPrice > (SELECT AVG(UnitPrice) FROM Products)
  //   ORDER BY UnitPrice;

  (String, Float)* above_average_price_products {
    avg_price = avg(unit_price(p) : p <- product);
    products = [(product_name(p), price) : p <- product, price = unit_price(p), price > avg_price];
    return sort_by(products, $(1), $(0));
  }

  // Product sales for 1997:
  //   SELECT DISTINCT
  //       a.CategoryName,
  //       b.ProductName,
  //       FORMAT(SUM(c.UnitPrice * c.Quantity * (1 - c.Discount)), 2) AS ProductSales,
  //       QUARTER(d.ShippedDate) AS ShippedQuarter
  //   FROM
  //       Categories a
  //           INNER JOIN
  //       Products b ON a.CategoryID = b.CategoryID
  //           INNER JOIN
  //       `Order Details` c ON b.ProductID = c.ProductID
  //           INNER JOIN
  //       Orders d ON d.OrderID = c.OrderID
  //   WHERE
  //       d.ShippedDate BETWEEN DATE('1997-01-01') AND DATE('1997-12-31')
  //   GROUP BY a.CategoryName , b.ProductName , QUARTER(d.ShippedDate)
  //   ORDER BY a.CategoryName , b.ProductName;

  (String, String, Int, Float)* sales_by_product_and_quarter(Int target_year) {
    subtotals = [];
    for order date <- shipped_date
      if year(date) == target_year 
        for product <- order_detail(order, ?) {
          key = (product, quarter(date));
          subtotals = accumulate(subtotals, key, subtotal(order, product));
        }
    records = [(name(category_id(p)), product_name(p), q, t) : pq t <- subtotals, (p?, q?) ?= pq];
    return sort_by(records, $(0), $(1), $(2));
  }


  (String, (String, Float*)*)* sales_by_category_product_and_quarter(Int target_year) {
    subtotals = [];
    for o d <- shipped_date
      if year(d) == target_year 
        for p <- order_detail(o, ?)
          subtotals = accumulate(subtotals, category_id(p), p, quarter(d), subtotal(o, p));

    return sort([
      name(c) -> sort([product_name(p) -> (get(qs, q, 0.0) : q <- (1, 2, 3, 4)) : p qs <- pqs])
      : c pqs <- subtotals
    ]);
  }


  // Sales by category in 1997:
  //   SELECT 
  //       CategoryName,
  //       SUM(d.UnitPrice * d.Quantity * (1 - d.Discount)) AS CategorySales
  //   FROM
  //       `Order Details` AS d
  //           INNER JOIN
  //       Orders AS o ON o.OrderID = d.OrderID
  //           INNER JOIN
  //       Products AS p ON p.ProductID = d.ProductID
  //           INNER JOIN
  //       Categories AS c ON p.CategoryId = c.CategoryId
  //   WHERE
  //       o.ShippedDate BETWEEN DATE('1997-01-01') AND DATE('1997-12-31')
  //   GROUP BY CategoryName
  //   ORDER BY CategoryName

  ## THIS ONE DOESN'T WORK, BUT I DON'T UNDERSTAND WHY
  ##   SELECT 
  ##       CategoryName, FORMAT(SUM(ProductSales), 2) AS CategorySales
  ##   FROM
  ##       (SELECT DISTINCT
  ##           a.CategoryName,
  ##               b.ProductName,
  ##               FORMAT(SUM(c.UnitPrice * c.Quantity * (1 - c.Discount)), 2) AS ProductSales,
  ##               CONCAT('Qtr ', QUARTER(d.ShippedDate)) AS ShippedQuarter
  ##       FROM
  ##           Categories AS a
  ##       INNER JOIN Products AS b ON a.CategoryID = b.CategoryID
  ##       INNER JOIN `Order Details` AS c ON b.ProductID = c.ProductID
  ##       INNER JOIN Orders AS d ON d.OrderID = c.OrderID
  ##       WHERE
  ##           d.ShippedDate BETWEEN DATE('1997-01-01') AND DATE('1997-12-31')
  ##       GROUP BY a.CategoryName , b.ProductName , CONCAT('Qtr ', QUARTER(d.ShippedDate))
  ##       ORDER BY a.CategoryName , b.ProductName , ShippedQuarter) AS X
  ##   GROUP BY CategoryName
  ##   ORDER BY CategoryName;

  (String, Float)* sales_by_category(Date start_date, Date end_date) {
    subtotals = [];
    for order date <- shipped_date
      if date >= start_date and date <= end_date
        for product <- order_detail(order, ?)
          subtotals = accumulate(subtotals, category_id(product), subtotal(order, product));

    return sort([name(c) -> t : c t <- subtotals]);
  }


  // (String, Float)* sales_by_category_2(Date start_date, Date end_date) {
  //   // Ids of all orders that were shipped between the given dates
  //   order_ids = [oid : oid sd <- shipped_date, sd >= start_date and sd <= end_date];

  //   // Details for each of the above orders
  //   details = [oid, pid : oid <- order_ids, pid <- order_detail(oid, ?)];

  //   // Categories of all the items that were sold during that time
  //   categories = [category_id(pid) : _ pid <- details];

  //   // Overall sales for each category
  //   subtotals = [name(c) -> sum(subtotal(oid, pid) : oid pid <- details) : c <- categories];

  //   // Sorting the results by category name
  //   return sort(subtotals);
  // };




  // (String, Float)* sales_by_category(Date start_date, Date end_date) {
  //   subtotals = [c -> sales_by_category(c, start_date, end_date) : c <- category];
  //   return sort_by([(name(c), t) : c t <- subtotals], $(0));
  // }

  // Float sales_by_category(CategoryId category, Date start_date, Date end_date) {
  //   total = 0.0;
  //   for p <- category_id(?, category)
  //     for o <- order_detail(?, p)
  //       if shipped_date(o, _) {
  //         date = shipped_date(o);
  //         if date >= start_date and date <= end_date
  //           total = total + subtotal(o, p);
  //       }
  //   return total;
  // }


  // 
  //   SELECT 
  //       a.ProductName,
  //       d.CompanyName,
  //       YEAR(OrderDate) AS OrderYear,
  //       FORMAT(SUM(CASE QUARTER(c.OrderDate)
  //               WHEN '1' THEN b.UnitPrice * b.Quantity * (1 - b.Discount)
  //               ELSE 0
  //           END),
  //           2) AS `Qtr 1`,
  //       FORMAT(SUM(CASE QUARTER(c.OrderDate)
  //               WHEN '2' THEN b.UnitPrice * b.Quantity * (1 - b.Discount)
  //               ELSE 0
  //           END),
  //           2) AS `Qtr 2`,
  //       FORMAT(SUM(CASE QUARTER(c.OrderDate)
  //               WHEN '3' THEN b.UnitPrice * b.Quantity * (1 - b.Discount)
  //               ELSE 0
  //           END),
  //           2) AS `Qtr 3`,
  //       FORMAT(SUM(CASE QUARTER(c.OrderDate)
  //               WHEN '4' THEN b.UnitPrice * b.Quantity * (1 - b.Discount)
  //               ELSE 0
  //           END),
  //           2) AS `Qtr 4`
  //   FROM
  //       Products a
  //           INNER JOIN
  //       `Order Details` b ON a.ProductID = b.ProductID
  //           INNER JOIN
  //       Orders c ON c.OrderID = b.OrderID
  //           INNER JOIN
  //       Customers d ON d.CustomerID = c.CustomerID
  //   WHERE
  //       c.OrderDate BETWEEN DATE('1997-01-01') AND DATE('1997-12-31')
  //   GROUP BY a.ProductName , d.CompanyName , YEAR(OrderDate)
  //   ORDER BY a.ProductName , d.CompanyName;

  (String, String, Int, Float, Float, Float, Float)* quarterly_orders_by_product_customer_year(Date start_date, Date end_date) {
    subtotals = []; // (Product -> Customer -> Year) -> Quarter -> Subtotal
    for order date <- order_date
      if date >= start_date and date <= end_date {
        year = year(date);
        quarter = quarter(date);
        for product <- order_detail(order, ?) {
          subtotal = subtotal(order, product);
          subtotals = accumulate(subtotals, (product, customer_id(order), year), quarter, subtotal);
        }
      }

    return sort_by([
      ( product_name(pcy(0)),
        company_name(pcy(1)),
        pcy(2),
        get(qt, 1, 0.0),
        get(qt, 2, 0.0),
        get(qt, 3, 0.0),
        get(qt, 4, 0.0)
      ) : pcy qt <- subtotals
    ], $(0), $(1), $(2));
  }


  (String, (String, (Int, Float*)*)*)* quarterly_orders_by_product_customer_year {
    subtotals = []; // Product -> Customer -> Year -> Quarter -> Subtotal
    for order product <- order_detail {
      customer = customer_id(order);
      date = order_date(order);
      year = year(date);
      quarter = quarter(date);
      subtotal = subtotal(order, product);
      subtotals = accumulate(subtotals, product, customer, year, quarter, subtotal);
    }

    return sort([
      product_name(p) ->
        sort([
          company_name(c) ->
            sort([y -> (get(qs, q, 0.0) : q <- (1, 2, 3, 4)) : y qs <- yqs])
          : c yqs <- cyqs
        ])
      : p cyqs <- subtotals
    ]);
  }


  // Minimum set of products that account for at least XX% of sales revenues in each category:
  //   WITH
  //     SalesByProduct AS (
  //       SELECT 
  //         CategoryID,
  //         p.ProductID,
  //         SUM(d.UnitPrice * d.Quantity * (1 - d.Discount)) AS ProductSales
  //       FROM
  //         `Order Details` AS d
  //           INNER JOIN
  //         Products AS p ON p.ProductID = d.ProductID
  //       GROUP BY CategoryID, p.ProductID
  //     ),
  //     SalesByCategory AS (
  //       SELECT CategoryID, SUM(ProductSales) AS CategorySales
  //       FROM SalesByProduct
  //       GROUP BY CategoryID
  //     ),
  //     SalesPercentages AS (
  //       SELECT
  //         sc.CategoryID,
  //         ProductID,
  //         ProductSales,
  //         ProductSales / CategorySales AS Percentage
  //       FROM
  //         SalesByCategory AS sc
  //           INNER JOIN
  //         SalesByProduct AS sp ON sc.CategoryId = sp.CategoryId
  //     ),
  //     CumulativeSalesPercentages AS (
  //       SELECT
  //         CategoryId,
  //         ProductId,
  //         ProductSales,
  //         Percentage,
  //         ( SELECT
  //             SUM(Percentage)
  //           FROM SalesPercentages AS csp
  //           WHERE
  //             csp.CategoryId = sp.CategoryId
  //               AND
  //             ( csp.Percentage > sp.Percentage
  //                 OR
  //               ( csp.Percentage = sp.Percentage
  //                   AND
  //                 csp.ProductId <= sp.ProductId
  //               )
  //             )
  //         ) AS CumulativePercentage
  //       FROM SalesPercentages AS sp
  //       ORDER BY CategoryId, Percentage Desc
  //     ),
  //     CategoryThresholds AS (
  //       SELECT CategoryId, MIN(CumulativePercentage) AS Threshold
  //       FROM CumulativeSalesPercentages
  //       WHERE CumulativePercentage >= 0.9
  //       GROUP BY CategoryId
  //       ORDER BY CategoryId, CumulativePercentage
  //     )
  //   
  //   SELECT
  //     CategoryName,
  //     ProductName,
  //     Format(Percentage, 2) AS Percentage,
  //     Format(CumulativePercentage, 2) AS CumulativePercentage
  //   FROM
  //     CumulativeSalesPercentages AS p
  //       INNER JOIN
  //     CategoryThresholds AS t on t.CategoryID = p.CategoryId
  //       INNER JOIN
  //     Categories AS c ON c.CategoryId = p.CategoryId
  //       INNER JOIN
  //     Products AS pr ON pr.ProductId = p.ProductId
  //   WHERE p.CumulativePercentage <= Threshold
  //   ORDER BY CategoryName, CumulativePercentage



  (String, (String, Float, Float, Float)*)* top_grossing_products_by_category(Int percentage) =
    sort([name(c) -> top_grossing_products(c, percentage) : c <- category]);


  (String, Float, Float, Float)* top_grossing_products(CategoryId category, Int percentage) {
    // Total revenues for each product in this category
    revenues = [(p, subtotal(p)) : p <- category_id(?, category)];

    // Sorting by revenues, in descending order
    revenues = sort_by(revenues, -$(1));

    // Total revenues for the entire category
    total = sumf((r : _, r <- revenues));

    // Revenues for each product as a fraction of the category total
    percentages = (r / total : _, r <- revenues);

    // cumulative_percentages(i) is the sum of the revenues (in percentage)
    // of the first i+1 top grossing product
    cumulative_percentages = partial_sums(percentages);

    // Counting how many products it takes to reach the given fraction of the total
    count_lower = prefix_length(cumulative_percentages, 100 * $ < percentage);
    count = min(count_lower + 1, |cumulative_percentages|);

    // Putting all the required information together
    return (
      (product_name(p), r, percentages(i), cumulative_percentages(i))
      : p, r @ i <- take(revenues, count)
    );
  }


  // For each discontinued product, show for each customer the three
  // most recent orders with their respective date, amount and discount
  // Ignore orders that were placed more than one year before
  // the very last order for that specific product

  // WITH
  //   Orders_1 AS (
  //   SELECT 
  //     c.CustomerId, CompanyName, p.ProductId, ProductName, o.OrderId, OrderDate, Quantity, Discount
  //   FROM
  //     `Order Details` AS d
  //       INNER JOIN
  //     Products AS p ON p.ProductId = d.ProductId
  //       INNER JOIN
  //     Orders AS o ON o.OrderId = d.OrderId
  //       INNER JOIN
  //     Customers AS c ON c.CustomerId = o.CustomerId
  //   WHERE
  //     Discontinued = 1
  //   ),
  //   ThresholdDates AS (
  //     SELECT 
  //       ProductId,
  //       MAX(OrderDate) AS LastOrderDate,
  //       DATE_ADD(MAX(OrderDate), INTERVAL -1 YEAR) AS ThresholdDate
  //     FROM Orders_1
  //     GROUP BY ProductId
  //   ),
  //   Orders_2 AS (
  //     SELECT
  //       o.*,
  //       ( SELECT COUNT(OrderId) + 1
  //         FROM Orders_1 AS s
  //         WHERE
  //           s.ProductId = o.ProductId AND
  //           s.CustomerId = o.CustomerId AND
  //           s.OrderDate > o.OrderDate
  //       ) AS Idx,
  //       ( SELECT COUNT(OrderId)
  //         FROM Orders_1 AS s
  //         WHERE
  //           s.ProductId = o.ProductId   AND
  //           s.CustomerId = o.CustomerId AND
  //           OrderDate >= ThresholdDate
  //       ) AS TotalCount
  //     FROM
  //       Orders_1 AS o
  //         INNER JOIN
  //       ThresholdDates as t ON t.ProductId = o.ProductId
  //     WHERE OrderDate >= ThresholdDate
  //   )
  // SELECT ProductName, CompanyName, OrderDate, Quantity, Idx, TotalCount
  // FROM Orders_2
  // WHERE Idx <= 3 AND TotalCount > 1
  // ORDER BY ProductName, CompanyName, OrderDate DESC


  (String, (String, (Date, Int, Float)*)*)* last_orders_for_discontinued_products =
    sort([product_name(p) -> os : p <- discontinued(?, true), os = last_orders(p), os != ()]);


  (String, (Date, Int, Float)*)* last_orders(ProductId product) {
    // Orders that include the given product
    orders = [o : o <- order_detail(?, product)];

    // Returning the empty sequence if there are no orders
    return () if orders == [];

    // repeat_customers = [c : c os <- by(orders, customer_id($)), |os| > 1];

    // Filtering out orders placed more than a year months before the last one
    threshold_date = max([order_date(o) : o <- orders]) - 365;
    orders = [o : o <- orders, order_date(o) >= threshold_date];

    // Grouping orders by customer
    orders = by(orders, customer_id($));

    // Sorting each customer's orders by date, and taking only the most recent three
    orders = [c -> reverse(sort_by(os, order_date($))) : c os <- orders, |os| > 1];

    // Putting all the required information together
    return sort([
      company_name(c) -> ((order_date(o), quantity(o, product), discount(o, product)) : o <- os)
      : c os <- orders
    ]);
  }


  // For each employee, the total value of his sales and those of all their subordinates
  Float sales(EmployeeId employee) = sum(subtotal(o) : o <- employee_id(?, employee));

  Float total_sales(EmployeeId employee) =
    sales(employee) + sum(total_sales(s) : s <- reports_to(?, employee));

  (String, String, Float, Float)* employees_sales = (
    (first_name(e), last_name(e), sales(e), total_sales(e))
    : e <- sort_by([e : e <- employee], last_name($))
  );


  // For each employee, the total value of his sales and those of
  // all their subordinates, in a hierarchical format
  SalesTree* sales_trees {
    top_managers = sort_by([e : e <- employee, not reports_to(e, _)], last_name($), first_name($));
    return (sales_tree(e) : e <- top_managers);
  }


  SalesTree sales_tree(EmployeeId employee) {
    // Searching for all the employees who report directly to the current one
    subordinates = sort_by([s : s <- reports_to(?, employee)], last_name($), first_name($));
    return (
      first_name(employee),
      last_name(employee),
      sales(employee),
      if subordinates != () then just(total_sales(employee)) else nothing,
      (sales_tree(s) : s <- subordinates)
    );
  }


  // Phone numbers of all other companies Northwind does business with:
  //   SELECT CompanyName, Phone, "" as ContactName
  //   FROM Shippers
  //       UNION
  //   SELECT CompanyName, Phone, ContactName
  //   FROM Customers
  //       UNION
  //   SELECT CompanyName, Phone, ContactName
  //   FROM Suppliers
  //   ORDER BY CompanyName, Phone, ContactName

  (String, String, String)* phone_numbers =
    sort_by(
      [(company_name(s), phone(s), "") : s <- shipper] &
      [(company_name(c), phone(c), contact_name(c)) : c <- customer] &
      [(company_name(s), phone(s), contact_name(s)) : s <- supplier],
      $(0), $(1), $(2)
    );


  // Finding the owner(s) of a phone number
  [ContactId] phone_owners(String phone_number) = [
    id : id <- phone(?, phone_number) | id <- home_phone(?, phone_number) | id <- fax(?, phone_number)
  ];


  (String, String) basic_info(EmployeeId id) = (first_name(id) & " " & last_name(id), "E");
  (String, String) basic_info(ShipperId  id) = (company_name(id), "H");
  (String, String) basic_info(SupplierId id) = (company_name(id), "S");
  (String, String) basic_info(CustomerId id) = (company_name(id), "C");


  (String, String, String)* phone_info(String phone) =
    sort_by([{
        desc, code = basic_info(id);
        return (desc, code, if fax(_, phone) then "Fax" else "Phone");
      } : id <- phone_owners(phone)],
      $(0)
    );


  // (String, String, String)* phone_info(String phone) =
  //   sort_by([
  //       (basic_info(id) | if fax(_, phone) then "Fax" else "Phone")
  //       : id <- phone_owners(phone)
  //     ],
  //     $(0)
  //   );

  // Show all customers that bought any given product more than once
  ## IMPLEMENT
}

  // shipper(ShipperId)
  //   phone        : String;

  // supplier(SupplierId)
  //   phone         : String,
  //   fax           : String,

  // employee(EmployeeId)
  //   home_phone          : String,

  // shipper(ShipperId)
  //   phone        : String;

  // customer(CustomerId)
  //   phone         : String,
  //   fax           : String;













  // (String, (String, Int, (Date, Int)*)*)* customers_who_bought_a_discontinued_product_more_than_once =
  //   sort([
  //     product_name(p) ->
  //       sort_by([
  //           (company_name(c), n, orders_dates_and_quantities(c, p))
  //           : c <- customer, n = purchases(p, c), n > 2
  //         ],
  //         $(0)
  //       )
  //     : p <- discontinued(?, true)
  //   ]);

  // Int purchases(ProductId p, CustomerId c) =
  //   |[o : o <- order_detail(?, p), customer_id(o) == c]|;

  // (Date, Int)* orders_dates_and_quantities(CustomerId c, ProductId p) =
  //   sort_by(
  //     [(order_date(o), quantity(o, p)) : o <- order_detail(?, p), customer_id(o) == c],
  //     -untag($(0))
  //   );
